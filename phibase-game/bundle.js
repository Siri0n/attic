(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

var Phaser = (typeof window !== "undefined" ? window['Phaser'] : typeof global !== "undefined" ? global['Phaser'] : null);

var game = new Phaser.Game(800, 600, Phaser.AUTO, '', "game", true);

game.state.add("game", function () {
	return {
		preload: function preload() {
			game.load.spritesheet("tile", "assets/tile.png", 48, 72);
			game.load.image("dot", "assets/dot.png");
			game.load.start();
		},
		create: function create() {
			var field = window.field = new Field({
				game: game,
				rect: {
					x: 30,
					y: 30,
					h: 540,
					w: 740
				}
			});
		}
	};
}());

function Field(_ref) {
	var game = _ref.game;
	var rect = _ref.rect;

	var grid = {
		tileWidth: 48,
		tileHeight: 72,
		margin: 6
	};
	var cols = 11;
	var rows = 6;
	var dotcol = 6;

	var group = game.add.group();

	var dots = game.add.group(group);
	dots.x = (dotcol - 1) * (grid.tileWidth + grid.margin);
	for (var i = 0; i < rows; i++) {
		var img = game.add.image(-grid.margin / 2, i * (grid.tileHeight + grid.margin) + grid.tileHeight, "dot");
		img.anchor.x = img.anchor.y = 0.5;
		dots.add(img);
	}
	var tiles = [];
	var afterTweenStop = [];
	var tweenCounter = 0;
	var events = {
		beginTween: function beginTween() {
			tweenCounter++;
			console.log(tweenCounter);
		},
		endTween: function endTween() {
			console.log(--tweenCounter);
			if (!tweenCounter) {
				console.log("lol");
				while (afterTweenStop.length) {
					afterTweenStop.pop()();
				}
			}
		},
		click: function click(tile) {
			var i = tile.y,
			    j = tile.x;
			if (j >= cols - 2) {
				return;
			}
			var checksum1 = tile.value + tiles[i][j + 1].value;
			var checksum2 = tile.value + tiles[i][j + 2].value;
			if (checksum1 != 1 || checksum2 != 1) {
				return;
			}
			if (tile.value) {
				tile.switch();
				tiles[i][j + 1].switch();
				tiles[i][j + 2].switch();
				tiles[i][j + 1].moveAndBack(-1, 0);
				tiles[i][j + 2].moveAndBack(-2, 0);
				afterTweenStop.push(function () {
					return adjust(rect);
				});
			} else {
				tiles[i][j + 1].moveAndBack(-1, 0, true);
				tiles[i][j + 2].moveAndBack(-2, 0, true);
				afterTweenStop.push(function () {
					tile.switch();
					tiles[i][j + 1].switch();
					tiles[i][j + 2].switch();
					adjust(rect);
				});
			}
		}
	};
	for (var _i = 0; _i < rows; _i++) {
		var row = [];
		for (var j = 0; j < cols; j++) {
			var value = void 0;
			if (j == 0 || j > cols - 3) {
				value = 0;
			} else {
				value = Math.random() > 0.5 ? 0 : 1;
			}
			row.push(new Tile({
				game: game,
				group: group,
				grid: grid,
				x: j,
				y: _i,
				value: value,
				events: events
			}));
		}
		tiles.push(row);
	}
	function adjust(rect, init) {
		if (columnHasUnit(cols - 1) || columnHasUnit(cols - 2)) {
			addColumn();
			if (columnHasUnit(cols - 2)) {
				addColumn();
			}
		} else {
			while (!columnHasUnit(cols - 1) && !columnHasUnit(cols - 2) && !columnHasUnit(cols - 3)) {
				removeColumn();
			}
		}

		if (columnHasUnit(0)) {
			addColumn(true);
		} else {
			while (!columnHasUnit(0) && !columnHasUnit(1)) {
				removeColumn(true);
			}
		}

		var width = (grid.tileWidth + grid.margin) * cols - grid.margin;
		var height = (grid.tileHeight + grid.margin) * rows - grid.margin;
		var scale = Math.min(rect.w / width, rect.h / height);
		width *= scale;
		height *= scale;
		if (init) {
			group.x = rect.x + (rect.w - width) / 2;
			group.y = rect.y + (rect.h - height) / 2;
			group.scale.x = group.scale.y = scale;
			dots.x = dotcol * (grid.tileWidth + grid.margin);
		} else {
			game.add.tween(group).to({ x: rect.x + (rect.w - width) / 2, y: rect.y + (rect.h - height) / 2 }, 300, "Linear", true);
			game.add.tween(group.scale).to({ x: scale, y: scale }, 300, "Linear", true);
			game.add.tween(dots).to({ x: dotcol * (grid.tileWidth + grid.margin) }, 300, "Linear", true);
		}
	}
	adjust(rect, true);

	function columnHasUnit(i) {
		var f = false;
		for (var _j = 0; _j < rows; _j++) {
			f = f || tiles[_j][i].value;
		}
		return f;
	}

	function addColumn(leftSide) {
		cols++;
		leftSide && dotcol++;
		for (var _i2 = 0; _i2 < rows; _i2++) {
			var newTile = new Tile({
				game: game,
				group: group,
				grid: grid,
				x: cols - 1,
				y: _i2,
				value: 0,
				events: events
			});
			if (leftSide) {
				newTile.x = -1;
				tiles[_i2].unshift(newTile);
				tiles[_i2].forEach(function (tile, index) {
					return tile.moveX(index);
				});
			} else {
				tiles[_i2].push(newTile);
			}
		}
	}
	function removeColumn(leftSide) {
		cols--;
		leftSide && dotcol--;
		for (var _i3 = 0; _i3 < rows; _i3++) {
			if (leftSide) {
				tiles[_i3].shift().destroy();
				tiles[_i3].forEach(function (tile, index) {
					return tile.moveX(index);
				});
			} else {
				tiles[_i3].pop().destroy();
			}
		}
	}
}

function Tile(_ref2) {
	var game = _ref2.game;
	var group = _ref2.group;
	var grid = _ref2.grid;
	var x = _ref2.x;
	var y = _ref2.y;
	var value = _ref2.value;
	var events = _ref2.events;

	var self = this;
	var g = game.add.sprite(x * (grid.tileWidth + grid.margin), y * (grid.tileHeight + grid.margin), "tile", value);
	group.add(g);
	g.inputEnabled = true;
	g.events.onInputDown.add(function () {
		return events.click(self);
	});

	this.moveAndBack = function (dx, dy, flag) {
		var gx = g.x,
		    gy = g.y;
		events.beginTween();
		if (flag) {
			game.add.tween(g).to({
				x: (x + dx) * (grid.tileWidth + grid.margin),
				y: (y + dy) * (grid.tileHeight + grid.margin)
			}, 300, "Linear", true).chain(game.add.tween(g).from({ alpha: 0 }, 200, "Linear")).onComplete.add(function () {
				g.x = gx;
				g.y = gy;
				events.endTween();
			});
		} else {
			g.x = (x + dx) * (grid.tileWidth + grid.margin);
			g.y = (y + dy) * (grid.tileHeight + grid.margin);
			game.add.tween(g).to({ x: gx, y: gy }, 300, "Linear", true).onComplete.add(events.endTween);
		}
	};

	this.switch = function () {
		value = 1 - value;
		g.frame = value;
	};

	this.destroy = function () {
		g.destroy();
	};

	this.moveX = function (_) {
		x = _;
		game.add.tween(g).to({ x: x * (grid.tileWidth + grid.margin) }, 300, "Linear", true);
	};
	Object.defineProperties(this, {
		value: {
			get: function get() {
				return value;
			},
			set: function set(_) {
				value = _;
				g.frame = value;
			}
		},
		x: {
			get: function get() {
				return x;
			},
			set: function set(_) {
				x = _;
				g.x = x * (grid.tileWidth + grid.margin);
			}
		},
		y: {
			get: function get() {
				return y;
			},
			set: function set(_) {
				y = _;
				g.y = y * (grid.tileHeight + grid.margin);
			}
		}
	});
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
